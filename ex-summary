ASSIGNMENT OVERVIEW

In this assignment we'll develop client server programs. The server program will act as a key-value store. It will support put, get, and delete operations. The server will be single threaded. As a result it will be able to serve at most one client at a time. Two versions of server and client will be developed such that one pair of them will communicate using TCP as L-4 protocol whereas the other pair will use UDP. A set of messages will be defined to support key value store, retrieve, and removal operations. Client will send request messages and server will respond with success or failure status to client. Message format will remain identical for both TCP and UDP based client-server pairs. After sending a request to server, client will wait for a certain period. After that client will retry sending the same message to server again. A well-defined message format will enable server and client to detect malformed messages and report that accordingly. Both client and server will log human readable (i.e. plain text details) of their conversation with time-stamps. These programs will be configurable through command line arguments, for example, while running client program, user will be able to provide server IP address and port. Client program is transient, i.e., it runs as long as user wants to use it. On the other hand, server will run forever until it is stopped intentionally by user. This assignment doesn't require the server to store key-value pairs to disk files for persistence. As a result all stored key-value pairs will be lost if server is killed. To deal with this shortcoming, the requirement includes pre-population of key-value pairs at the start of client program. Overall this assignment will provide us a solid understanding of the most basic form of inter-computer communication accomplished by using sockets.

TECHNICAL IMPRESSION

At start server will load some key value pairs from “KeyValue” file. This is a pre population step performed so that server is equipped with a set of such pairs and ready to start serving all sorts of client requests right from the beginning.

Server program requires server port to come from its user as the only command line argument.

Server performs the following steps before it can start communicating to users:
1. A socket is created to work in the IPv4 domain with its connection type as stream (for TCP) and datagram (for UDP) and protocol as TCP/UDP.
2. bind system call is invoked to announce that the server will be willing to accept connection from any IPv4 addresses.
3. At this point a UDP server becomes ready for client-server communication. However in case of TCP, server also invokes listen system call to tell system to support  MAXPENDING = 5 clients to be in the queue while it serves a particular client.

Now server enters a run-forever loop. One such iteration of the loop serves exactly one session with a client. The sequence of actions in this loop is as follows:
1. TCP version of sever invokes accept and gets blocked in that system call until a client connects to this server. On the other hand, UDP version just invokes recvfrom and gets blocked as such. On successful connection (in the TCP case) server invokes recv to receive request from client.
2. As a message is received at the server, it parses the message and determines request type and request parameters. Depending upon the request type server invokes one of the following functions: “put”, “get”, and “delete_key”. In case “parse_package” function determined that the request does not contain a valid message, the processing enters into an appropriate error handling phase.
3. In both successful and failure cases, server develops a response message and sends it back to client using send or sendto system call.
Detailed log is appended to file “server.log”. This is carried out by first writing the timestamp followed by the IP address and then adequate details about the conversation just took place. In order to get time with millisecond level resolution, timeval structure is populated by calling gettimeofday function and its fields are formatted according to the requirement.

The key value store part is designed such that it can be used both for TCP and UDP cases and for future assignments. At present it exposes five functions: “get”, “put”, “delete_key”, “init_key_values”, and “parse_package”.

Client programs take at least two command line arguments: server IP and port. They then do the following to communicate to server:
1. Create a socket the same way as servers do.
2. Then it invokes connect system call using the file descriptor returned by the socket system call and the details of server’s IP and port (in a sockaddr_in structure).
3. Then it invokes the send or sendto system call to send message to server. And receives response by calling either recv or recvfrom. It its life time, client sends only one request to server, receives the response, and dies. However if the send operation is timed out, then client tries to send the same request over to server again. This timeout is handled by calling setsockopt with level as SOL_SOCKET and option as SO_RCVTIMEO.

Future improvement areas:
1. Refactor the code such that the main logic of the program can independently run of without a concern for the underlying protocol that has been used. The protocol (either TCP or UDP) can come as another command line argument both for server and client.
2. Define a comprehensive set of key value related request and response. Layout all possible success and error codes and corresponding message.
3. Request parsing code can return a structure called “request” having the command string, key, and value as fields.
